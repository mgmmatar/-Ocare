<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Configuring RoleVoter bean to use custom access roles, by default roles 
		should be in the form ROLE_{XXX} -->
                
                
                
	<beans:bean id="roleVoter"
		class="org.springframework.security.access.vote.RoleVoter">
		<beans:property name="rolePrefix" value=""></beans:property>
	</beans:bean>

	<beans:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:constructor-arg name="decisionVoters"
			ref="roleVoter" />
	</beans:bean>
        
	<http authentication-manager-ref="dao-auth"
		access-decision-manager-ref="accessDecisionManager"
                use-expressions="true" auto-config="true" disable-url-rewriting="false">
                <csrf disabled="true"/>	
               <!--<intercept-url pattern="/reservation/**" access="RULE_ADMIN" />-->
		<form-login login-page="/auth/login" 
                        authentication-failure-url="/auth/login"
			username-parameter="username" password-parameter="password"
			default-target-url="/proxy" />
		<logout invalidate-session="true" logout-success-url="/login"
			logout-url="/auth/j_spring_security_logout" />
		<access-denied-handler error-page="/auth/denied"/>
		<session-management invalid-session-url="/auth/login">
			<concurrency-control max-sessions="1"
				expired-url="/auth/login" />
		</session-management>
	</http>

<!--	<authentication-manager id="in-memory-auth">
		<authentication-provider>
			<user-service>
				<user name="admin" password="admin" authorities="Admin" />
			</user-service>
		</authentication-provider>
	</authentication-manager>-->

	<authentication-manager id="dao-auth">
		<authentication-provider user-service-ref="userDetailsService">
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="userDetailsService"
		class="com.obird.OUMS.service.impl.UserServiceImp" />
        
        
        
<!--
	<authentication-manager id="jdbc-auth">
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from users where username = ?"
				authorities-by-username-query="SELECT u.username as username , r.role as authority FROM users u inner join users_roles ur on u.id=ur.user_id inner join roles r on r.id=ur.role_id where u.username = ?" />
		</authentication-provider>
	</authentication-manager>-->

	<!-- MySQL DB DataSource -->
<!--	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/mydb" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="root" />
	</beans:bean>-->

	 
<!--	<beans:bean id="dbDataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/MyLocalDB" />
	</beans:bean>-->
</beans:beans>